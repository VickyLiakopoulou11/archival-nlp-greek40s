#!/usr/bin/env python3
# -*- coding: utf-8 -*-

# Example code for reading and extracting information UIMA XMI files with standoff annotations generated by the NLP group of ILSP/Athena RC.

from os import listdir
from os.path import isfile, join

# Cassis is a UIMA CAS processing library written in Python https://pypi.org/project/dkpro-cassis/
# To install the cassis package with pip, run pip install dkpro-cassis
from cassis import *

# importing xlsxwriter module to write excel files.
# To install the xlsxwriter package with pip, run pip install xlsxwriter
import xlsxwriter
import os
ruta_dir = os.path.abspath("../")

ruta_output_dir = "../output/"
typesystem_files = [
                    "./dis-merged-typesystem.xml",
]

distypes = ["gr.ilsp.types.dis.DISAddressee", "gr.ilsp.types.dis.DISDate", "gr.ilsp.types.dis.DISDocType", "gr.ilsp.types.dis.DISSender", "gr.ilsp.types.dis.DISSubject",
            "gr.ilsp.types.dis.ArmyUnit","gr.ilsp.nlp.dis.titles.ruta.ArmyUnit.ArmyUnit",
            "gr.ilsp.types.dis.Geoname"]

if __name__ == '__main__':

    # Load typesystem
    typesystem = None;
    for typesystem_file in typesystem_files:
        print("Typesystem: " + typesystem_file)
        with open(typesystem_file, 'rb') as tf:
            typesystem = load_typesystem(tf)
            try:
                t = typesystem.create_type(name="uima.tcas.DocumentAnnotation", supertypeName="uima.tcas.Annotation")
                typesystem.add_feature(t, name="language", rangeTypeName="uima.cas.String")
            except:
                print("DA already loaded. Skipping.")
                pass

    # Get xmi files from output
    xmi_files = [f for f in listdir(ruta_output_dir) if isfile(join(ruta_output_dir, f)) and f.endswith("xmi")]
    sorted(xmi_files)
    lines = list()
    for xmi_file in xmi_files:
        xmi_file = join(ruta_output_dir, xmi_file)

        with open(xmi_file, 'rb') as f:
            cas = load_cas_from_xmi(f, typesystem=typesystem)
            for sentence in cas.select('gr.ilsp.types.Sentence'):
                for distype in distypes:
                    for distypeinstance in cas.select_covered(distype, sentence):
                        lines.append("\t".join([cas.get_covered_text(sentence), distype.rsplit('.',1)[1], cas.get_covered_text(distypeinstance), str(distypeinstance.begin), str(distypeinstance.end)]))


    print("Excel: " + ruta_dir + "/DIS_Choices_Final.xlsx")
    workbook = xlsxwriter.Workbook(ruta_dir + "/DIS_Choices_Final.xlsx")
    worksheet = workbook.add_worksheet("Sheet1")
    worksheet.set_column("A:A", 40)
    worksheet.set_column("B:B", 20)
    worksheet.set_column("C:C", 40)

    row_ind = 0
    col_ind = 0
    for header in ["Sentence", "Annotation", "Annotation Text", "Begin", "End"]:
        worksheet.write(row_ind,col_ind,header)
        col_ind = col_ind + 1

    row_ind = 1
    col_ind = 0

    for line in lines:
        for cell in line.split("\t"):
            try:
              cell = int(cell)
            except ValueError as verr:
              pass # do job to handle: s does not contain anything convertible to int
            except Exception as ex:
              pass # do job to handle: Exception occurred while converting to int
            worksheet.write(row_ind, col_ind, cell)
            col_ind = col_ind + 1
        row_ind = row_ind + 1
        col_ind = 0

    workbook.close()
