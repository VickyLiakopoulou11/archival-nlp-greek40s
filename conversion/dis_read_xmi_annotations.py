#!/usr/bin/env python3
# -*- coding: utf-8 -*-

# Example code for reading and extracting information UIMA XMI files with standoff annotations generated by the NLP group of ILSP/Athena RC.

from os import listdir
from os.path import isfile, join

# Cassis is a UIMA CAS processing library written in Python https://pypi.org/project/dkpro-cassis/
# To install the cassis package with pip, run pip install dkpro-cassis
from cassis import *


ruta_output_dir = "../output/"
typesystem_files = [
                    "./dis-merged-typesystem.xml",
]

distypes = ["gr.ilsp.types.dis.DISAddressee", "gr.ilsp.types.dis.DISDate", "gr.ilsp.types.dis.DISDocType", "gr.ilsp.types.dis.DISSender", "gr.ilsp.types.dis.DISSubject",
            "gr.ilsp.types.dis.ArmyUnit", "gr.ilsp.types.dis.Geoname"]

if __name__ == '__main__':

    # Load typesystem
    typesystem = None;
    for typesystem_file in typesystem_files:
        print(typesystem_file)
        with open(typesystem_file, 'rb') as tf:
            typesystem = load_typesystem(tf)
            t = typesystem.create_type(name="uima.tcas.DocumentAnnotation", supertypeName="uima.tcas.Annotation")
            typesystem.add_feature(t, name="language", rangeTypeName="uima.cas.String")

    # Get xmi files from output
    xmi_files = [f for f in listdir(ruta_output_dir) if isfile(join(ruta_output_dir, f)) and f.endswith("xmi")]
    sorted(xmi_files)

    for xmi_file in xmi_files:
        print(xmi_file)
        xmi_file = join(ruta_output_dir, xmi_file)

        # tsv_file = join(ruta_output_dir, xmi_file.replace('.xmi', '.tsv'))

        with open(xmi_file, 'rb') as f:
            cas = load_cas_from_xmi(f, typesystem=typesystem)
            for sentence in cas.select('gr.ilsp.types.Sentence'):
                for token in cas.select_covered('gr.ilsp.types.Token', sentence):
                     print(cas.get_covered_text(token))
                     # Annotation values can be accessed as properties
                     print('Token: begin={0}, end={1}, pos={2}'.format(token.begin, token.end, token.posTag))

                for distype in distypes:
                    for distypeinstance in cas.select_covered(distype, sentence):
                        print(cas.get_covered_text(distypeinstance))
                        print(distype + (': begin={0}, end={1}'.format(distypeinstance.begin, distypeinstance.end)))
                break
        break
