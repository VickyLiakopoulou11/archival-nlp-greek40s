PACKAGE gr.ilsp.nlp.dis.titles.ruta;

TYPESYSTEM gr.ilsp.types.DISTypeSystem;
TYPESYSTEM gr.ilsp.types.ILSPTypeSystem;


DECLARE ArmyUnitPhrase;



//ArmyUnitLemmas List
WORDLIST ArmyUnitLemmas = 'ArmyUnitLemmas.txt';
Token{INLIST(ArmyUnitLemmas, Token.lemma.value)->MARK(ArmyUnitPhrase)};


//ArmyUnitPhrasesList
//Since the lemmas are not always correct, there should be a list of words which can be reduced significantly if the problems in the lemmatisation  process will be fixed.
WORDLIST ArmyUnitPhrases = 'ArmyUnitPhrases.txt';
Document{->MARKFAST(ArmyUnitPhrase, ArmyUnitPhrases, true)};



//ArmyUnit Tokens (because of problematic lemmas)
((ArmyUnitPhrase)"."){->MARK(ArmyUnitPhrase)};
((ArmyUnitPhrase)"/"){->MARK(ArmyUnitPhrase)};


//ArmyUnit
DECLARE ArmyUnit;
ArmyUnitPhrase+{->MARK(ArmyUnit)};
(ArmyUnit)("/")(ArmyUnit){->MARK(ArmyUnit)};

//EXCEPTIONS
ArmyUnit{REGEXP("Α/Α")->UNMARK(ArmyUnit)};
//Unmark ArmyUnit which is part of DISDocType annotation.
ArmyUnit{PARTOF(DISDocType)->UNMARK(ArmyUnit)};


//DigitNums, e.g. 152 ΤΑΓΜΑΤΟΣ
DECLARE YearsRange;
"194\\d(\\-194\\d)?"->YearsRange;

DECLARE DigitNums;
"(\\d{1,5}(,|\\s*-|\\s*\\/|\\s*ΚΑΙ)?)+"->DigitNums;
(DigitNums{PARTOF(DISDate)}){->UNMARK(DigitNums)};
(DigitNums{PARTOF(YearsRange)}){->UNMARK(DigitNums)};


//DigitWordNums = DigitNums + Greek suffixes, e.g.7ης ΤΑΞΙΑΡΧΙΑΣ 
DECLARE DigitWordNums;
"(\\d{1,5}(αν|ας|άς|α|ά|ΑΝ|ΑΣ|Α)(,|\\s*-|\\s*\\/|\\s*ΚΑΙ)?)+"->DigitWordNums;
"(\\d{1,5}(ην|ης|ής|ή|η|ΗΝ|HΣ|Η)(,|\\s*-|\\s*\\/|\\s*ΚΑΙ)?)+"->DigitWordNums;
"(\\d{1,5}(ον|όν|ου|ού|ος|ός|ο|ό|ΟΝ|ΟΥ|ΟΣ|Ο)(,|\\s*-|\\s*\\/|\\s*ΚΑΙ)?)+"->DigitWordNums;
(DigitWordNums{PARTOF(DISDate)}){->UNMARK(DigitWordNums)};


//GreekNums, e.g. Γ΄ΣΩΜΑ ΣΤΡΑΤΟΥ
DECLARE GreekNums;
Token{REGEXP("[Α-Ω]('|΄|\\d{1,3})?")->MARK(GreekNums)};
GreekNums{REGEXP("Η|Ο")->UNMARK(GreekNums)};
ArmyUnitPhrase{PARTOF(GreekNums)->UNMARK(GreekNums)}
(GreekNums ("," GreekNums)+){->MARK(GreekNums)};
(GreekNums ("ΚΑΙ" GreekNums)+){->MARK(GreekNums)};
"([Α-Ω]('|΄)?(,|\\s*-\\s?|\\s*ΚΑΙ\\s))+[Α-Ω]('|΄)?"->GreekNums;

//Special GreekNums, e.g. Α'Σ.Σ.
"Α΄\\.?Σ\\.?|Β΄\\.?Σ\\.?|Γ΄\\.?Σ\\.?|Δ΄\\.?Σ\\.?|Ε΄\\.?Σ\\.?|Σ\\."->GreekNums; 


//Exceptions in GreekWordNums
DECLARE GreekNumsExc;
Token{REGEXP("ΕΠ'|ΕΠ΄|ΥΠ'|ΥΠ΄")->MARK(GreekNumsExc)}; 
GreekNums{PARTOF(GreekNumsExc)->UNMARK(GreekNums)};

//Two Greek Letters as numbering
DECLARE TwoGreekLetters;
Token{REGEXP("[Α-Ε][Α-Ε]|ΖΕ|ΡΠ|ΠΒ|ΗΒ")->MARK(TwoGreekLetters)};
(TwoGreekLetters ArmyUnit){->MARK(ArmyUnit)};
(ArmyUnit TwoGreekLetters){->MARK(ArmyUnit)};

//LatinNums, e.g. VII ΜΕΡΑΡΧΙΑ
DECLARE LatinNums;
Token{REGEXP("([IXVYΙΧΥ]-*)+")->MARK(LatinNums)};
(LatinNums ("ΚΑΙ" LatinNums)+){->MARK(LatinNums)};

//ComplexNums, e.g. VII/3B ΜΕΡΑΡΧΙΑ
DECLARE ComplexNums;
((LatinNums) "/" (DigitNums)){->MARK(ComplexNums)};

//LatinWordNums = LatinNums + Greek suffixes, e.g. XVo ΤΑΓΜΑ ΠΥΡΟΒΟΛΙΚΟΥ
DECLARE LatinWordNums;
Token{REGEXP("[IXVΧΙYΥ](αν|ας|άς|α|ά|ΑΝ|ΑΣ|Α)")->MARK(LatinWordNums)};
Token{REGEXP("[IXVΧΙYΥ](ην|ης|ής|ή|η|ΗΝ|HΣ|Η)")->MARK(LatinWordNums)};
Token{REGEXP("[IXVΧΙYΥ](ον|όν|ου|ού|ος|ός|ο|ό|ΟΝ|ΟΥ|ΟΣ|Ο)")->MARK(LatinWordNums)};
(LatinWordNums ("ΚΑΙ" LatinWordNums)+){->MARK(LatinWordNums)};

((DigitWordNums|DigitNums|GreekNums|ComplexNums|LatinWordNums|LatinNums)+ ArmyUnit){->MARK(ArmyUnit)};
(ArmyUnit(DigitWordNums|DigitNums|GreekNums|ComplexNums|LatinWordNums|LatinNums)+){->MARK(ArmyUnit)};
(DigitWordNums+ ArmyUnit){->MARK(ArmyUnit)};
(GreekNums+ ArmyUnit){->MARK(ArmyUnit)};


//ArmyUnitExceptions List. 
//(The words on the list, if found alone, they are not considered to be Army Unit, only next to other words.)
WORDLIST ArmyUnitExceptionLemmas = 'ArmyUnitExceptionLemmas.txt';
DECLARE ArmyUnitException;
Token{INLIST(ArmyUnitExceptionLemmas, Token.lemma.value)->MARK(ArmyUnitException)};
((ArmyUnitException)"."){->MARK(ArmyUnitException)};
ArmyUnitException{-> UNMARK(ArmyUnit)};


// Expand Army Units with post-modifiers that are proper names in genitive
// or with adjectival pre-modifiers that belong to a close set including δημοκρατικός, etc.
//e.g ΔΙΕΥΘΥΝΣΗ ΕΘΝΟΦΡΟΥΡΑΣ Κ.ΜΑΚΕΔΟΝΙΑΣ
DECLARE Premod;
Token{REGEXP(Token.posTag.value, "ABBR|INIT|Aj.*Ge")->MARK(Premod)}; 
Premod{REGEXP("ΕΠΙ")->UNMARK(Premod)};
DECLARE GenitiveNoun;
Token{REGEXP(Token.posTag.value, "No.*Ge") ->MARK(GenitiveNoun)};
(ArmyUnit  (Premod)* GenitiveNoun){->MARK(ArmyUnit)};



//ArmyUnitExceptionPrases. 
//(A list of phrases that are not ArmyUnit but may have been captured as ArmyUnit).
DECLARE ArmyUnitExceptionPhrase;
WORDLIST ArmyUnitExceptionPhrases = 'ArmyUnitExceptionPhrases.txt';
Document{-> MARKFAST(ArmyUnitExceptionPhrase, ArmyUnitExceptionPhrases, true)};
ArmyUnitExceptionPhrase{->UNMARK(ArmyUnit)};

 
//Army Unit + Geoname
((ArmyUnit)((",")?(Geoname))+){->MARK(ArmyUnit)};
((ArmyUnit)("ΚΑΙ")(Geoname)){->MARK(ArmyUnit)};


//Αντιστασιακές Οργανώσεις
DECLARE NameInQuotes;
"\"[^\"]+\"+"->NameInQuotes;
"\\s'[^\\s][^']+'+"->NameInQuotes;
DECLARE Org;
Token{Token.lemma.value=="οργάνωση"->MARK(Org)};
(Token(Token.lemma.value=="εθνικός") Org){->MARK(Org)};
(Token(Token.lemma.value=="αντιστασιακός") Org){->MARK(Org)};
(Token(Token.lemma.value=="πανελλήνιος") Org){->MARK(Org)};
(Token(Token.lemma.value=="απελευθερωτικός") Org){->MARK(Org)};
((Org)(NameInQuotes)){->MARK(ArmyUnit)};

//Αντιστασιακές Οργανώσεις + Geoname
((Org) (NameInQuotes)(Geoname*)){->MARK(ArmyUnit)};

//Συγκροτήματα
DECLARE Complex;
Token{Token.lemma.value=="συγκρότημα"->MARK(Complex)};
(Complex NameInQuotes+){->MARK(ArmyUnit)};
(Complex (Premod) GenitiveNoun){->MARK(ArmyUnit)};
(Complex Geoname){->MARK(ArmyUnit)};


//Unmark ArmyUnit which is part of another ArmyUnit annotation.
ArmyUnit{PARTOFNEQ(ArmyUnit)->UNMARK(ArmyUnit)};




  